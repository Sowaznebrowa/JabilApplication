/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import Classes.CDSApplet;
import Classes.FileManager;
import Classes.PropertiesClass;
import Classes.SQLConnection;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Sowa
 */
public class SearchPanel extends javax.swing.JPanel {

    public static SearchPanel searchPanel;
    String userGroup;
    String[] eventNames,vendorNames,carierNames,buyerNames,statusNames;
    public static String userLogin;
    SQLConnection sqlConnector;
    int userValue;
    File file;
    String userMail,userCarrier;
    
    public SearchPanel(String userGroup, String login, String userMail, String userCarrier) {
        initComponents();
        searchPanel = this;
        this.userGroup = userGroup;
        this.userCarrier = userCarrier;
        userLogin = login;
        eventDocumentsButton.setEnabled(false);
        eventCommentsButton.setEnabled(false);
        this.userMail = userMail;
        eventStatusButton.setEnabled(false);
        logsButton.setEnabled(false);
        sqlConnector = SQLConnection.sqlConnector;
        String query = "SELECT DataValue FROM "+PropertiesClass.props.DB_NAME+".Group WHERE DataName='"+userGroup+"'";
        userValue = Integer.parseInt(sqlConnector.getQueryFirstElement(query));
        setGUI(userValue);
        refreshComboList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eventDocumentsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        eventStatusButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        logsButton = new javax.swing.JButton();
        filterTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox3 = new javax.swing.JComboBox();
        jComboBox4 = new javax.swing.JComboBox();
        backButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        exportToFileButton = new javax.swing.JButton();
        eventCommentsButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        exportCommentsToFileButton = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));

        eventDocumentsButton.setText("Show Event Documents");
        eventDocumentsButton.setMaximumSize(new java.awt.Dimension(145, 20));
        eventDocumentsButton.setMinimumSize(new java.awt.Dimension(145, 20));
        eventDocumentsButton.setName(""); // NOI18N
        eventDocumentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventDocumentsButtonActionPerformed(evt);
            }
        });

        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Events:");

        eventStatusButton.setText("Change Event Status");
        eventStatusButton.setMaximumSize(new java.awt.Dimension(145, 20));
        eventStatusButton.setMinimumSize(new java.awt.Dimension(145, 20));
        eventStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventStatusButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("PONumber:");

        jLabel5.setText("Event Number (BL or AWB):");

        jTextField2.setEditable(false);

        jTextField1.setEditable(false);

        jTextField5.setEditable(false);

        jTextField4.setEditable(false);

        jLabel6.setText("Update By:");

        jLabel7.setText("Update Date:");

        jLabel8.setText("Status Name:");

        jTextField3.setEditable(false);

        jTextField6.setEditable(false);

        jTextField7.setEditable(false);

        jLabel9.setText("Carrier Name:");

        jLabel10.setText("Vendor Name:");

        jLabel11.setText("Buyer Name:");

        jTextField8.setEditable(false);

        logsButton.setText("Logs");
        logsButton.setMaximumSize(new java.awt.Dimension(145, 20));
        logsButton.setMinimumSize(new java.awt.Dimension(145, 20));
        logsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logsButtonActionPerformed(evt);
            }
        });

        filterTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterTextFieldKeyReleased(evt);
            }
        });

        jLabel12.setText("Event Filter:");

        jComboBox1.setToolTipText("");
        jComboBox1.setMaximumSize(new java.awt.Dimension(145, 20));
        jComboBox1.setMinimumSize(new java.awt.Dimension(145, 20));
        jComboBox1.setName(""); // NOI18N
        jComboBox1.setPreferredSize(new java.awt.Dimension(145, 20));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jComboBox2.setMaximumSize(new java.awt.Dimension(145, 20));
        jComboBox2.setMinimumSize(new java.awt.Dimension(145, 20));
        jComboBox2.setName(""); // NOI18N
        jComboBox2.setPreferredSize(new java.awt.Dimension(145, 20));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jComboBox3.setMaximumSize(new java.awt.Dimension(145, 20));
        jComboBox3.setMinimumSize(new java.awt.Dimension(145, 20));
        jComboBox3.setName(""); // NOI18N
        jComboBox3.setPreferredSize(new java.awt.Dimension(145, 20));
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });

        jComboBox4.setMaximumSize(new java.awt.Dimension(145, 20));
        jComboBox4.setMinimumSize(new java.awt.Dimension(145, 20));
        jComboBox4.setName(""); // NOI18N
        jComboBox4.setPreferredSize(new java.awt.Dimension(145, 20));
        jComboBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox4ItemStateChanged(evt);
            }
        });

        backButton.setText("BACK");
        backButton.setMaximumSize(new java.awt.Dimension(145, 20));
        backButton.setMinimumSize(new java.awt.Dimension(145, 20));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Vendor:");

        jLabel3.setText("Carrier:");

        jLabel13.setText("Buyer:");
        jLabel13.setToolTipText("");

        jLabel14.setText("Status:");

        exportToFileButton.setText("Export Events To File");
        exportToFileButton.setMaximumSize(new java.awt.Dimension(145, 20));
        exportToFileButton.setMinimumSize(new java.awt.Dimension(145, 20));
        exportToFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToFileButtonActionPerformed(evt);
            }
        });

        eventCommentsButton.setText("Show Event Comments");
        eventCommentsButton.setMaximumSize(new java.awt.Dimension(145, 20));
        eventCommentsButton.setMinimumSize(new java.awt.Dimension(145, 20));
        eventCommentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventCommentsButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("Comments:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        exportCommentsToFileButton.setText("Export Comments To File");
        exportCommentsToFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCommentsToFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventCommentsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventDocumentsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventStatusButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportToFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportCommentsToFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(filterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel11)
                                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField5)
                            .addComponent(jTextField8)
                            .addComponent(jTextField7)
                            .addComponent(jTextField6)
                            .addComponent(jTextField3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(21, 21, 21))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField4)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel13)
                        .addGap(4, 4, 4)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(eventStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eventDocumentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eventCommentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(logsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exportToFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(exportCommentsToFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void setGUI(int userValue){
        
        switch(userValue){
            case 0:{ //Admin=0
             
            }break;
            case 1:{ //Buyer=1            
            //eventStatusButton.setVisible(false);
            }break;
            case 2:{ //Vendor=2
            eventStatusButton.setVisible(false);
            }break;
            case 3:{ //PU=3
            
            }break;
            case 4:{ //Impex=4
            
            }break;
            case 5:{ //Customs Agency=5
            
            }break;
            case 6:{ //Transport=6           
            eventStatusButton.setVisible(false);
            }break;
            case 7:{ //Courier=7           
            //eventStatusButton.setVisible(false);
            }break;
            default:{
            eventStatusButton.setVisible(false);
            }break;
        }
    }
    
    private void eventDocumentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventDocumentsButtonActionPerformed
         String selectedEvent = jList1.getSelectedValue().toString();
         DocumentsPanel dPanel = new DocumentsPanel(selectedEvent, userGroup,searchPanel);
         Classes.CDSApplet.cdsApplet.add(dPanel);
         SearchPanel.searchPanel.setVisible(false);
         dPanel.refreshItemList();
    }//GEN-LAST:event_eventDocumentsButtonActionPerformed
    private void eventStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventStatusButtonActionPerformed
         String selectedEvent = jList1.getSelectedValue().toString();
         EventStatusPanel evsPanel = new EventStatusPanel(selectedEvent, searchPanel,userGroup,userCarrier);
         Classes.CDSApplet.cdsApplet.add(evsPanel);
         SearchPanel.searchPanel.setVisible(false);
    }//GEN-LAST:event_eventStatusButtonActionPerformed
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
       if (evt.getValueIsAdjusting() == false) {
        int selectedIndex = jList1.getSelectedIndex();
        if (selectedIndex == -1) {
        //No selection, disable fire button.
            eventDocumentsButton.setEnabled(false);
            eventCommentsButton.setEnabled(false);
            eventStatusButton.setEnabled(false);
            logsButton.setEnabled(false);

        } else {
        //Selection, enable the fire button.
            eventDocumentsButton.setEnabled(true);
            eventCommentsButton.setEnabled(true);
            eventStatusButton.setEnabled(true);
            logsButton.setEnabled(true);
             loadItemDetails(selectedIndex);
        }
       }
    }//GEN-LAST:event_jList1ValueChanged
    private void saveEventsToFile(){                                                   
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = chooser.getSelectedFile(); // path to file
            //String fileName = file.getName();
            try{
                String path = file.getPath()+"\\selectedEvents.csv";
                BufferedWriter bw = new BufferedWriter(new FileWriter(path));
                
                for(int i=0;i<eventNames.length;i++){
                    String query = "SELECT t.BLNumber, t.PONumber,t.UpdatedBy, t.UpdatedDate, u.Login, v.DataName, c.DataName, s.DataName FROM "+PropertiesClass.props.DB_NAME+".Transports t,"+PropertiesClass.props.DB_NAME+".User u,"+PropertiesClass.props.DB_NAME+".Vendor v,"+PropertiesClass.props.DB_NAME+".Carrier c, "+PropertiesClass.props.DB_NAME+".Status s WHERE t.Buyer_ID = u.ID AND t.Vendor_ID=v.ID AND t.Carrier_ID=c.ID AND t.Status_ID=s.ID AND t.BLNumber = '"+eventNames[i]+"';";
                    String[] vendorDetails = sqlConnector.getQueryFirstRow(query,8);
                    bw.write(vendorDetails[0]+";"+vendorDetails[1]+";"+vendorDetails[5]+";"+vendorDetails[6]+";"+vendorDetails[4]);
                    bw.newLine(); 
                }
                if (bw != null) {
                    bw.flush();
                    bw.close();
                }
                JOptionPane.showMessageDialog(searchPanel, "Events saved.");
                //MainPanel.mainPanel.refreshItemList();
            } catch (Exception e) {
            System.out.println("Exception while writing csv file: " + e);
            JOptionPane.showMessageDialog(searchPanel, "Error while saving!");
        }
            
        }
    }
    private void saveCommentsToFile(){                                                   
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = chooser.getSelectedFile(); // path to file
            //String fileName = file.getName();
            try{
                String path = file.getPath()+"\\selectedEventsComments.txt";
                BufferedWriter bw = new BufferedWriter(new FileWriter(path));
                
                for(String eventName : eventNames){
                    String query ="SELECT c.Comment FROM "+PropertiesClass.props.DB_NAME+".Comments c, "+PropertiesClass.props.DB_NAME+".Transports t WHERE c.Transports_ID = t.ID AND t.BLNumber = '"+eventName+"' ORDER BY c.UpdatedDate ASC;";
                    String [] comments = sqlConnector.getQueryFirstColumn(query);
                    bw.write(eventName+":");
                    bw.newLine();
                    for(String comment:comments)
                    {       
                        bw.write(comment+";");
                        bw.newLine();
                    }
                    bw.newLine();
                }
                if (bw != null) {
                    bw.flush();
                    bw.close();
                }
                JOptionPane.showMessageDialog(searchPanel, "Comments saved.");
                //MainPanel.mainPanel.refreshItemList();
            } catch (Exception e) {
            System.out.println("Exception while writing txt file: " + e);
            JOptionPane.showMessageDialog(searchPanel, "Error while saving!");
        }
            
        }
    }     
    private void logsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logsButtonActionPerformed
        LogsPanel logPanel= new LogsPanel(jList1.getSelectedValue().toString(),searchPanel);
        Classes.CDSApplet.cdsApplet.add(logPanel);
         SearchPanel.searchPanel.setVisible(false);
         logPanel.refreshItemList();
    }//GEN-LAST:event_logsButtonActionPerformed

    private void filterTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterTextFieldKeyReleased
         if(!filterTextField.getText().isEmpty()) refreshItemList(filterTextField.getText());
         else refreshItemList("");
    }//GEN-LAST:event_filterTextFieldKeyReleased

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        searchPanel.setVisible(false);
        MainPanel.mainPanel.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
         refreshItemList(filterTextField.getText());
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        refreshItemList(filterTextField.getText());
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
         refreshItemList(filterTextField.getText());
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jComboBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox4ItemStateChanged
         refreshItemList(filterTextField.getText());
    }//GEN-LAST:event_jComboBox4ItemStateChanged

    private void exportToFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToFileButtonActionPerformed
      saveEventsToFile();
    }//GEN-LAST:event_exportToFileButtonActionPerformed

    private void eventCommentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventCommentsButtonActionPerformed
        String selectedEvent = jList1.getSelectedValue().toString();
         CommentsPanel cPanel = new CommentsPanel(selectedEvent, userGroup, searchPanel);
         Classes.CDSApplet.cdsApplet.add(cPanel);
         SearchPanel.searchPanel.setVisible(false);
         cPanel.refreshCommentsList();
    }//GEN-LAST:event_eventCommentsButtonActionPerformed

    private void exportCommentsToFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportCommentsToFileButtonActionPerformed
      saveCommentsToFile(); //ver.1.01   exporting comments to file added from 19-10-2014
    }//GEN-LAST:event_exportCommentsToFileButtonActionPerformed
    public void refreshItemList() {

        String query;
        switch(userValue){
            case 0:{ //Admin=0
             query = "SELECT BLNumber FROM "+PropertiesClass.props.DB_NAME+".Transports;";
            }break;
            case 1:{ //Buyer=1
             query = "SELECT BLNumber FROM "+PropertiesClass.props.DB_NAME+".Transports;";
            }break;
            case 2:{ //Vendor=2
             query = "SELECT BLNumber FROM "+PropertiesClass.props.DB_NAME+".Transports a, "+PropertiesClass.props.DB_NAME+".Status b WHERE a.Status_ID=b.ID AND a.UpdatedBy='"+userMail+"' AND (b.DataName='Opened' OR b.DataName='Completed' OR b.DataName='Correct' OR b.DataName='AC' OR b.DataName='Reopened');";
            }break;
            case 3:{ //PU=3
             query = "SELECT BLNumber FROM "+PropertiesClass.props.DB_NAME+".Transports a, "+PropertiesClass.props.DB_NAME+".Status b WHERE a.Status_ID=b.ID AND (b.DataName='Opened' OR b.DataName='AC' OR b.DataName='Reopened');";
            }break;
            case 4:{ //Impex=4
             query = "SELECT BLNumber FROM "+PropertiesClass.props.DB_NAME+".Transports a, "+PropertiesClass.props.DB_NAME+".Status b WHERE a.Status_ID=b.ID AND (b.DataName='Opened' OR b.DataName='Completed' OR b.DataName='Rejected' OR b.DataName='Correct' OR b.DataName='Archived' OR b.DataName='AC' OR b.DataName='Reopened');";
            }break;
            case 5:{ //Customs Agency=5
             //ver.1.01 Customs Agency must see all types of events -- 28.08.2014  
             //query = "SELECT BLNumber FROM "+PropertiesClass.props.DB_NAME+".Transports a, "+PropertiesClass.props.DB_NAME+".Status b WHERE a.Status_ID=b.ID AND (b.DataName='Completed' OR b.DataName='Correct' OR b.DataName='AC');";
             query = "SELECT BLNumber FROM "+PropertiesClass.props.DB_NAME+".Transports a, "+PropertiesClass.props.DB_NAME+".Status b WHERE a.Status_ID=b.ID AND (b.DataName!='Opened');";//AC don't want to see 'opened' status ver.1.01  -- 01.11.2014
            }break;
            case 6:{ //Transport=6
             query = "SELECT BLNumber FROM "+PropertiesClass.props.DB_NAME+".Transports;";
            }break;
            //ver.1.02 Added new user group (Courier) -- 30.11.2014    
            case 7:{ //Courier=7
             query = "SELECT BLNumber FROM "+PropertiesClass.props.DB_NAME+".Transports a, "+PropertiesClass.props.DB_NAME+".Carrier b WHERE a.Carrier_ID = b.ID AND b.DataName ='"+userCarrier+"' ;"; 
            }break;    
            default:{
             query = "SELECT BLNumber FROM "+PropertiesClass.props.DB_NAME+".Transports;";    
            }break;
        
        }
        DefaultListModel listModel = new DefaultListModel();       
        eventNames = sqlConnector.getQueryFirstColumn(query);

        for (int i = 0; i < eventNames.length; i++) {
            listModel.addElement(eventNames[i]);
        }
        jList1.setModel(listModel); 
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        jTextArea1.setText("");
    }
    public void refreshItemList(String filterString) {        
        String dbName=PropertiesClass.props.DB_NAME;
        String selectedVendor = "%";
        String selectedCarrier = "%";
        String selectedBuyer = "%";
        String selectedStatus = "%";
        if(jComboBox1.getSelectedIndex()!= -1 && jComboBox1.getSelectedIndex()!= 0) selectedVendor = jComboBox1.getSelectedItem().toString();
        if(jComboBox2.getSelectedIndex()!= -1 && jComboBox2.getSelectedIndex()!= 0) selectedCarrier = jComboBox2.getSelectedItem().toString();
        if(jComboBox3.getSelectedIndex()!= -1 && jComboBox3.getSelectedIndex()!= 0) selectedBuyer = jComboBox3.getSelectedItem().toString();
        if(jComboBox4.getSelectedIndex()!= -1 && jComboBox4.getSelectedIndex()!= 0) selectedStatus = jComboBox4.getSelectedItem().toString();
        String query;
        switch(userValue){
            case 0:{ //Admin=0
             query = "SELECT BLNumber FROM "+dbName+".Transports t, "+dbName+".Vendor v, "+dbName+".Carrier c, "+dbName+".User u, "+dbName+".Status s WHERE t.Status_ID=s.ID AND t.Carrier_ID=c.ID AND t.Vendor_ID=v.ID AND t.Buyer_ID=u.ID AND s.DataName LIKE '"+selectedStatus+"' AND c.DataName LIKE '"+selectedCarrier+"' AND v.DataName LIKE '"+selectedVendor+"' AND u.Login LIKE '"+selectedBuyer+"'  AND t.`BLNumber` LIKE '"+filterString+"%' ;";
            }break;
            case 1:{ //Buyer=1
             query = "SELECT BLNumber FROM "+dbName+".Transports t, "+dbName+".Vendor v, "+dbName+".Carrier c, "+dbName+".User u, "+dbName+".Status s WHERE t.Status_ID=s.ID AND t.Carrier_ID=c.ID AND t.Vendor_ID=v.ID AND t.Buyer_ID=u.ID AND s.DataName LIKE '"+selectedStatus+"' AND c.DataName LIKE '"+selectedCarrier+"' AND v.DataName LIKE '"+selectedVendor+"' AND u.Login LIKE '"+selectedBuyer+"' AND t.`BLNumber` LIKE '"+filterString+"%' ;";
            }break;
            case 2:{ //Vendor=2
             query = "SELECT BLNumber FROM "+dbName+".Transports t, "+dbName+".Vendor v, "+dbName+".Carrier c, "+dbName+".User u, "+dbName+".Status s WHERE t.Status_ID=s.ID AND t.Carrier_ID=c.ID AND t.Vendor_ID=v.ID AND t.Buyer_ID=u.ID AND s.DataName LIKE '"+selectedStatus+"' AND c.DataName LIKE '"+selectedCarrier+"' AND v.DataName LIKE '"+selectedVendor+"' AND u.Login LIKE '"+selectedBuyer+"' AND t.UpdatedBy='"+userMail+"' AND (s.DataName='Opened' OR s.DataName='Completed' OR s.DataName='AC' OR s.DataName='Reopened') AND t.`BLNumber` LIKE '"+filterString+"%' ;";
            }break;
            case 3:{ //PU=3
             query = "SELECT BLNumber FROM "+dbName+".Transports t, "+dbName+".Vendor v, "+dbName+".Carrier c, "+dbName+".User u, "+dbName+".Status s WHERE t.Status_ID=s.ID AND t.Carrier_ID=c.ID AND t.Vendor_ID=v.ID AND t.Buyer_ID=u.ID AND s.DataName LIKE '"+selectedStatus+"' AND c.DataName LIKE '"+selectedCarrier+"' AND v.DataName LIKE '"+selectedVendor+"' AND u.Login LIKE '"+selectedBuyer+"' AND (s.DataName='Opened' OR s.DataName='AC' OR s.DataName='Reopened') AND t.`BLNumber` LIKE '"+filterString+"%' ;";
            }break;
            case 4:{ //Impex=4
             query = "SELECT BLNumber FROM "+dbName+".Transports t, "+dbName+".Vendor v, "+dbName+".Carrier c, "+dbName+".User u, "+dbName+".Status s WHERE t.Status_ID=s.ID AND t.Carrier_ID=c.ID AND t.Vendor_ID=v.ID AND t.Buyer_ID=u.ID AND s.DataName LIKE '"+selectedStatus+"' AND c.DataName LIKE '"+selectedCarrier+"' AND v.DataName LIKE '"+selectedVendor+"' AND u.Login LIKE '"+selectedBuyer+"' AND (s.DataName='Opened' OR s.DataName='Completed' OR s.DataName='Rejected' OR s.DataName='Correct' OR s.DataName='Archived' OR s.DataName='AC' OR s.DataName='Reopened') AND t.`BLNumber` LIKE '"+filterString+"%' ;";
            }break;
            case 5:{ //Customs Agency=5
             //ver.1.01 Customs Agency must see all types of events -- 28.08.2014
             query = "SELECT BLNumber FROM "+dbName+".Transports t, "+dbName+".Vendor v, "+dbName+".Carrier c, "+dbName+".User u, "+dbName+".Status s WHERE t.Status_ID=s.ID AND t.Carrier_ID=c.ID AND t.Vendor_ID=v.ID AND t.Buyer_ID=u.ID AND s.DataName LIKE '"+selectedStatus+"' AND c.DataName LIKE '"+selectedCarrier+"' AND v.DataName LIKE '"+selectedVendor+"' AND u.Login LIKE '"+selectedBuyer+"' AND (s.DataName!='Opened') AND t.`BLNumber` LIKE '"+filterString+"%' ;";//AC don't want to see 'opened' status ver.1.01  -- 01.11.2014
            }break;
            case 6:{ //Transport=6
             query = "SELECT BLNumber FROM "+dbName+".Transports t, "+dbName+".Vendor v, "+dbName+".Carrier c, "+dbName+".User u, "+dbName+".Status s WHERE t.Status_ID=s.ID AND t.Carrier_ID=c.ID AND t.Vendor_ID=v.ID AND t.Buyer_ID=u.ID AND s.DataName LIKE '"+selectedStatus+"' AND c.DataName LIKE '"+selectedCarrier+"' AND v.DataName LIKE '"+selectedVendor+"' AND u.Login LIKE '"+selectedBuyer+"' AND t.`BLNumber` LIKE '"+filterString+"%' ;";
            }break;
            //ver.1.02 Added new user group (Courier) -- 30.11.2014   
            case 7:{ //Courier=7
             query = "SELECT BLNumber FROM "+dbName+".Transports t, "+dbName+".Vendor v, "+dbName+".Carrier c, "+dbName+".User u, "+dbName+".Status s WHERE t.Status_ID=s.ID AND t.Carrier_ID=c.ID AND t.Vendor_ID=v.ID AND t.Buyer_ID=u.ID AND s.DataName LIKE '"+selectedStatus+"' AND c.DataName LIKE '"+selectedCarrier+"' AND v.DataName LIKE '"+selectedVendor+"' AND u.Login LIKE '"+selectedBuyer+"' AND t.Carrier_ID = c.ID AND c.DataName ='"+userCarrier+"' AND t.`BLNumber` LIKE '"+filterString+"%' ;";
            }break;    
            default:{
             query = "SELECT BLNumber FROM "+dbName+".Transports t, "+dbName+".Vendor v, "+dbName+".Carrier c, "+dbName+".User u, "+dbName+".Status s WHERE t.Status_ID=s.ID AND t.Carrier_ID=c.ID AND t.Vendor_ID=v.ID AND t.Buyer_ID=u.ID AND s.DataName LIKE '"+selectedStatus+"' AND c.DataName LIKE '"+selectedCarrier+"' AND v.DataName LIKE '"+selectedVendor+"' AND u.Login LIKE '"+selectedBuyer+"' AND t.`BLNumber` LIKE '"+filterString+"%' ;";   
            }break;
        }
        DefaultListModel listModel = new DefaultListModel();       
        eventNames = sqlConnector.getQueryFirstColumn(query);

        for (int i = 0; i < eventNames.length; i++) {
            listModel.addElement(eventNames[i]);
        }
        jList1.setModel(listModel); 
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        jTextArea1.setText("");
    }
    private void loadItemDetails(int selectedIndex){
               
        String query = "SELECT t.BLNumber, t.PONumber,t.UpdatedBy, t.UpdatedDate, u.Login, v.DataName, c.DataName, s.DataName FROM "+PropertiesClass.props.DB_NAME+".Transports t,"+PropertiesClass.props.DB_NAME+".User u,"+PropertiesClass.props.DB_NAME+".Vendor v,"+PropertiesClass.props.DB_NAME+".Carrier c, "+PropertiesClass.props.DB_NAME+".Status s WHERE t.Buyer_ID = u.ID AND t.Vendor_ID=v.ID AND t.Carrier_ID=c.ID AND t.Status_ID=s.ID AND t.BLNumber = '"+eventNames[selectedIndex]+"';";
        String[] vendorDetails = sqlConnector.getQueryFirstRow(query,8);
        jTextField1.setText(vendorDetails[0]);
        jTextField2.setText(vendorDetails[1]);
        jTextField4.setText(vendorDetails[2]);
        jTextField5.setText(vendorDetails[3]);
        jTextField3.setText(vendorDetails[4]);
        jTextField8.setText(vendorDetails[5]);
        jTextField7.setText(vendorDetails[6]);
        jTextField6.setText(vendorDetails[7]);
        query ="SELECT a.Comment FROM "+PropertiesClass.props.DB_NAME+".Comments a, "+PropertiesClass.props.DB_NAME+".Transports b WHERE a.Transports_ID = b.ID AND b.BLNumber='"+eventNames[selectedIndex]+"' ORDER BY a.UpdatedDate ASC;";
        String [] comments = sqlConnector.getQueryFirstColumn(query);
        String allComments = "";
        for(int i=0;i<comments.length;i++)
        {       
            allComments+=comments[i]+"\n";
        }
        jTextArea1.setText(allComments);
           
    }
    private void refreshComboList() {

        DefaultComboBoxModel carierModel = new DefaultComboBoxModel();
        DefaultComboBoxModel vendorModel = new DefaultComboBoxModel();
        DefaultComboBoxModel buyerModel = new DefaultComboBoxModel();
        DefaultComboBoxModel statusModel = new DefaultComboBoxModel();
        String query = "SELECT DataName FROM "+PropertiesClass.props.DB_NAME+".Vendor WHERE DataActive ='1' ORDER BY DataName ASC ;";
        vendorNames = sqlConnector.getQueryFirstColumn(query);
        query = "SELECT DataName FROM "+PropertiesClass.props.DB_NAME+".Carrier WHERE DataActive ='1' ORDER BY DataName ASC ;";
        carierNames = sqlConnector.getQueryFirstColumn(query);
        query = "Select a.Login from "+PropertiesClass.props.DB_NAME+".User a, "+PropertiesClass.props.DB_NAME+".Group b where a.Group_ID=b.ID AND b.DataName='Buyer' ORDER BY a.Login ASC;";
        buyerNames = sqlConnector.getQueryFirstColumn(query);
        query = "SELECT DataName FROM "+PropertiesClass.props.DB_NAME+".Status WHERE DataActive ='1' ORDER BY DataName ASC;";
        statusNames = sqlConnector.getQueryFirstColumn(query);
        
        vendorModel.addElement("all");
        for (int i = 0; i < vendorNames.length; i++) {
            vendorModel.addElement(vendorNames[i]);
        }
        jComboBox1.setModel(vendorModel);
        
        carierModel.addElement("all");
        for (int i = 0; i < carierNames.length; i++) {
            carierModel.addElement(carierNames[i]);
        }
        jComboBox2.setModel(carierModel);
        
        buyerModel.addElement("all");
        for (int i = 0; i < buyerNames.length; i++) {
            buyerModel.addElement(buyerNames[i]);
        }
        jComboBox3.setModel(buyerModel);
        
        statusModel.addElement("all");
        for (int i = 0; i < statusNames.length; i++) {
            statusModel.addElement(statusNames[i]);
        }
        jComboBox4.setModel(statusModel);
        
       // jComboBox1.setSelectedIndex(-1);
       // jComboBox2.setSelectedIndex(-1);
       // jComboBox3.setSelectedIndex(-1);
       // jComboBox4.setSelectedIndex(-1);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton eventCommentsButton;
    private javax.swing.JButton eventDocumentsButton;
    private javax.swing.JButton eventStatusButton;
    private javax.swing.JButton exportCommentsToFileButton;
    private javax.swing.JButton exportToFileButton;
    private javax.swing.JTextField filterTextField;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JButton logsButton;
    // End of variables declaration//GEN-END:variables
}
